rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is an admin
    function isAdmin() {
      let adminEmails = request.auth.token.email in ['abelsajuchazhoor@gmail.com'];
      let isInAdminsCollection = exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      return adminEmails || isInAdminsCollection;
    }

    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if user is email verified
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }

    // Function to check if user is a dealer
    function isDealer() {
      let userDoc = get(/databases/(default)/documents/users/$(request.auth.uid));
      return userDoc != null && userDoc.data != null && userDoc.data.role == 'dealer';
    }

    // Function to check if user is a dealer OR regular user (both can create listings)
    function isDealerOrUser() {
      let userDoc = get(/databases/(default)/documents/users/$(request.auth.uid));
      return userDoc != null && userDoc.data != null && 
             (userDoc.data.role == 'dealer' || userDoc.data.role == 'user');
    }

    // Function to validate vehicle data
    function isValidVehicleData() {
      let requiredFields = ['make', 'model', 'year', 'price', 'mileage', 'type', 'dealerUid'];
      return request.resource.data.keys().hasAll(requiredFields) 
        && request.resource.data.dealerUid == request.auth.uid
        && request.resource.data.type in ['car', 'van', 'truck'];
    }

    // Function to validate dealer profile data
    function isValidDealerProfile() {
      let requiredFields = ['businessName', 'contact', 'description', 'location', 'businessHours', 'socialMedia', 'updatedAt'];
      let data = request.resource.data;
      
      return data.keys().hasAll(requiredFields)
        && data.contact.keys().hasAll(['email', 'phone', 'website'])
        && data.location.keys().hasAll(['lat', 'long', 'addressLines'])
        && data.businessHours.keys().hasAll(['mondayToFriday', 'saturday', 'sunday'])
        && data.description.size() <= 2000 // Approx. 100 words
        && data.socialMedia is list;
    }

    // Function to check if dealer owns the vehicle listing
    function ownsVehicle() {
      return resource.data.dealerUid == request.auth.uid;
    }

    // Function to validate image data
    function isValidImage() {
      return request.resource.data.keys().hasAll(['url', 'uploadedAt'])
        && request.resource.data.url is string
        && request.resource.data.uploadedAt is timestamp;
    }

    // Function to validate offer data
    function isValidOfferData() {
      let requiredFields = ['name', 'email', 'phone', 'offer', 'timestamp'];
      return request.resource.data.keys().hasAll(requiredFields)
        && request.resource.data.offer is number
        && request.resource.data.offer > 0
        && request.resource.data.timestamp is timestamp;
    }

    // Helper function to check if user owns vehicle for given offer
    function ownsVehicleByOfferId(vehicleId) {
      let vehicleDoc = get(/databases/(default)/documents/vehicles/$(vehicleId));
      return vehicleDoc != null && vehicleDoc.data != null 
        && vehicleDoc.data.dealerUid == request.auth.uid;
    }

    // Function to validate garage data
    function isValidGarageData() {
      let data = request.resource.data;
      
      // Basic required fields validation
      return data.name is string && data.name.size() > 0
        && data.description is string && data.description.size() > 0
        && data.services is list && data.services.size() > 0
        && data.ownerId == request.auth.uid
        && data.isActive is bool
        // Location validation - be flexible with structure
        && (
          // New structure with addressLines array
          (data.location.keys().hasAll(['addressLines', 'lat', 'long'])
           && data.location.addressLines is list
           && data.location.lat is number
           && data.location.long is number)
          ||
          // Old structure for backward compatibility
          (data.location.keys().hasAll(['address', 'city', 'state', 'zipCode'])
           && data.location.address is string)
        )
        // Contact validation - be flexible
        && (
          // New structure with separate contact object
          (data.contact.keys().hasAll(['phone', 'email'])
           && data.contact.phone is string
           && data.contact.email is string)
          ||
          // Direct phone/email fields for backward compatibility
          (data.phone is string && data.email is string)
        )
        // Image fields are optional - if present, must be strings
        && (!('image' in data) || data.image is string)
        && (!('coverImage' in data) || data.coverImage is string);
    }

    // Function to check if user owns the garage
    function ownsGarage() {
      return resource.data.ownerId == request.auth.uid;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read for everyone (public user profiles)
      allow read: if true;
      // Allow create during signup (no verification required)
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Allow update if user is admin, or if it's the user's own document and they're verified
      // Exception: Allow unverified users to update their emailVerified status
      allow update: if isAdmin() || 
        (request.auth.uid == userId && 
          (isEmailVerified() || 
           (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified'])))
        );
    }

    // Admins collection rules
    match /admins/{adminId} {
      // Allow read if user is authenticated
      allow read: if request.auth != null;
      // Allow write only if user is an admin
      allow write: if isAdmin();
    }

    // Vehicles collection rules
    match /vehicles/{vehicleId} {
      // Allow read for everyone (public listings)
      allow read: if true;
      
      // Allow list operation for dealers and users querying their own listings (removed email verification requirement for testing)
      allow list: if isAuthenticated() 
        && isDealerOrUser()
        && request.query.limit <= 100  // Limit query size for security
        && (
          // Allow if no where clause (getting all listings)
          !('where' in request.query)
          // Or if querying by dealerUid matching their own ID
          || (
            request.query.where.size() == 1
            && request.query.where[0].op == '=='
            && request.query.where[0].field == 'dealerUid'
            && request.query.where[0].value == request.auth.uid
          )
        );
      
      // Allow create for authenticated dealers and users with valid data (removed email verification requirement for testing)
      allow create: if (isAuthenticated() 
        && isDealerOrUser()
        && isValidVehicleData()) || isAdmin();
      
      // Allow update/delete for dealers and users who own the listing or admins (removed email verification requirement for testing)
      allow update: if (isAuthenticated() 
        && isDealerOrUser()
        && ownsVehicle()
        && isValidVehicleData()) || isAdmin();
        
      allow delete: if (isAuthenticated() 
        && isDealerOrUser()
        && ownsVehicle()) || isAdmin();
    }

    // Dealers collection rules
    match /dealers/{userId} {
      // Allow read for everyone (public dealer profiles)
      allow read: if true;
      
      // Allow write for verified dealers' own profile or admins
      allow write: if (isAuthenticated() 
        && isEmailVerified()
        && isDealer()
        && request.auth.uid == userId
        && isValidDealerProfile()) || isAdmin();
    }

    // Dealer profile assets rules
    match /dealer-assets/{userId}/{imageType} {
      // Allow read for everyone (public dealer profiles)
      allow read: if true;
      
      // Allow write for verified dealers' own profile images or admins
      allow write: if (isAuthenticated() 
        && isEmailVerified()
        && request.auth.uid == userId
        && isDealer()
        && isValidImage()
        // Ensure imageType is either 'logo' or 'banner'
        && (imageType == 'logo' || imageType == 'banner')) || isAdmin();
    }

    // Offers collection rules
    match /offers/{vehicleId} {
      // Allow read for vehicle owner and offer maker
      allow read: if isAuthenticated() 
        && isEmailVerified()
        && (
          // Vehicle owner can read all offers for their vehicle
          (isDealerOrUser() && ownsVehicleByOfferId(vehicleId))
          // Or admin can read all
          || isAdmin()
        );
      
      // Allow create for authenticated and verified users making offers
      allow create: if isAuthenticated() 
        && isEmailVerified()
        && isValidOfferData();
      
      // Allow update/delete for offer maker or vehicle owner or admin
      allow update, delete: if isAuthenticated() 
        && isEmailVerified()
        && (
          isDealerOrUser() && ownsVehicleByOfferId(vehicleId)
          || isAdmin()
        );
    }

    // Favorites collection rules
    match /favorites/{userId} {
      // Users can only read and write their own favorites if verified
      allow read, write: if (isAuthenticated() 
        && isEmailVerified() 
        && request.auth.uid == userId) || isAdmin();
    }

    // Garages collection rules
    match /garages/{garageId} {
      // Allow read for everyone (public garage listings)
      allow read: if true;
      
      // Allow list operation for everyone (public garage listings) with query limits for security
      allow list: if true && request.query.limit <= 200;
      
      // Allow create for authenticated users with valid data (removed email verification requirement for testing)
      allow create: if (isAuthenticated() 
        && isDealerOrUser()
        && isValidGarageData()) || isAdmin();
      
      // Allow update/delete for users who own the garage or admins (removed email verification requirement for testing)
      allow update: if (isAuthenticated() 
        && isDealerOrUser()
        && ownsGarage()
        && isValidGarageData()) || isAdmin();
        
      allow delete: if (isAuthenticated() 
        && isDealerOrUser()
        && ownsGarage()) || isAdmin();
    }

    // Keep existing rules for other collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}