rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if user is a dealer
    function isDealer() {
      let userDoc = get(/databases/(default)/documents/users/$(request.auth.uid));
      return userDoc != null && userDoc.data != null && userDoc.data.role == 'dealer';
    }

    // Function to validate vehicle data
    function isValidVehicleData() {
      let requiredFields = ['make', 'model', 'year', 'price', 'mileage', 'type', 'dealerUid'];
      return request.resource.data.keys().hasAll(requiredFields) 
        && request.resource.data.dealerUid == request.auth.uid
        && request.resource.data.type in ['car', 'van', 'truck'];
    }

    // Function to validate dealer profile data
    function isValidDealerProfile() {
      let requiredFields = ['businessName', 'contact', 'description', 'location', 'businessHours', 'socialMedia', 'updatedAt'];
      let data = request.resource.data;
      
      return data.keys().hasAll(requiredFields)
        && data.contact.keys().hasAll(['email', 'phone', 'website'])
        && data.location.keys().hasAll(['lat', 'long', 'addressLines'])
        && data.businessHours.keys().hasAll(['mondayToFriday', 'saturday', 'sunday'])
        && data.description.size() <= 2000 // Approx. 100 words
        && data.socialMedia is list;
    }

    // Function to check if dealer owns the vehicle listing
    function ownsVehicle() {
      return resource.data.dealerUid == request.auth.uid;
    }

    // Vehicles collection rules
    match /vehicles/{vehicleId} {
      // Allow read for everyone (public listings)
      allow read: if true;
      
      // Allow list operation for dealers querying their own listings
      allow list: if isAuthenticated() 
        && isDealer()
        && request.query.limit <= 100  // Limit query size for security
        && (
          // Allow if no where clause (getting all listings)
          !('where' in request.query)
          // Or if querying by dealerUid matching their own ID
          || (
            request.query.where.size() == 1
            && request.query.where[0].op == '=='
            && request.query.where[0].field == 'dealerUid'
            && request.query.where[0].value == request.auth.uid
          )
        );
      
      // Allow create for authenticated dealers with valid data
      allow create: if isAuthenticated() 
        && isDealer()
        && isValidVehicleData();
      
      // Allow update/delete only for the dealer who owns the listing
      allow update: if isAuthenticated() 
        && isDealer()
        && ownsVehicle()
        && isValidVehicleData();
        
      allow delete: if isAuthenticated() 
        && isDealer()
        && ownsVehicle();
    }

    // Dealers collection rules
    match /dealers/{userId} {
      // Allow read for everyone (public dealer profiles)
      allow read: if true;
      
      // Allow write only for the dealer's own profile
      allow write: if isAuthenticated() 
        && isDealer()
        && request.auth.uid == userId
        && isValidDealerProfile();
    }

    // Dealer profile assets rules
    match /dealer-assets/{userId}/{imageType} {
      // Allow read for everyone (public dealer profiles)
      allow read: if true;
      
      // Allow write only for the dealer's own profile images
      allow write: if isAuthenticated() 
        && request.auth.uid == userId
        && isDealerUser()
        && isValidImage()
        // Ensure imageType is either 'logo' or 'banner'
        && (imageType == 'logo' || imageType == 'banner');
    }

    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  

		// Favorites collection rules
    match /favorites/{userId} {
      // Users can only read and write their own favorites
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    }
    }